"use client";

import { useState, useEffect } from "react";
import { doc, setDoc, collection, getDocs, addDoc } from "firebase/firestore";
import { db } from "@/lib/firebaseConfig";
import { useAuth } from "@/app/context/AuthContext";
import Image from "next/image";
import { useRouter } from "next/navigation"; // Th√™m useRouter

interface SaveModalProps {
  imageUrl: string;
  onClose: () => void;
}

const SaveModal: React.FC<SaveModalProps> = ({ imageUrl, onClose }) => {
  const { user } = useAuth();
  const [collections, setCollections] = useState<{ id: string; name: string }[]>([]);
  const [selectedCollection, setSelectedCollection] = useState("");
  const [newCollection, setNewCollection] = useState("");
  const [isSaving, setIsSaving] = useState(false);
  const [loadingCollections, setLoadingCollections] = useState(true);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const router = useRouter(); // Kh·ªüi t·∫°o router


  // üõ† L·∫•y danh s√°ch collections t·ª´ Firestore
  useEffect(() => {
    if (user) {
      const fetchCollections = async () => {
        setLoadingCollections(true);
        try {
          const querySnapshot = await getDocs(collection(db, "users", user.uid, "collections"));
          const fetchedCollections = querySnapshot.docs.map((doc) => ({
            id: doc.id, // D√πng id ƒë·ªÉ l√†m key
            name: doc.id, // Firestore doc.id ch√≠nh l√† t√™n b·∫£ng
          }));
          setCollections(fetchedCollections);
        } catch (error) {
          console.error("L·ªói khi l·∫•y collections:", error);
        }
        setLoadingCollections(false);
      };
      fetchCollections();
    }
  }, [user]);

  // üõ† L∆∞u ·∫£nh v√†o b·∫£ng ƒë√£ ch·ªçn
  const handleSave = async () => {
    if (!user) {
      router.push("/login"); // üöÄ Chuy·ªÉn ƒë·∫øn trang ƒëƒÉng nh·∫≠p
      return;
    }
    if (!selectedCollection) {
      alert("Vui l√≤ng ch·ªçn b·∫£ng.");
      return;
    }

    setIsSaving(true);
    try {
      await addDoc(collection(db, "users", user.uid, "collections", selectedCollection, "images"), {
        url: imageUrl,
        timestamp: new Date(),
      });
      alert("L∆∞u ·∫£nh th√†nh c√¥ng!");
      onClose();
    } catch (error) {
      console.error("L·ªói khi l∆∞u ·∫£nh:", error);
      alert("C√≥ l·ªói x·∫£y ra khi l∆∞u ·∫£nh.");
    }
    setIsSaving(false);
  };

  // üõ† T·∫°o b·∫£ng m·ªõi v√† l∆∞u ·∫£nh v√†o ƒë√≥
  const handleCreateCollection = async () => {
    if (!user) {
      alert("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ t·∫°o b·∫£ng.");
      router.push("/login");
      return;
    }
    if (!newCollection.trim()) {
      alert("T√™n b·∫£ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
      return;
    }
    try {
      // T·∫°o b·∫£ng m·ªõi
      const newCollectionRef = doc(db, "users", user.uid, "collections", newCollection);
      await setDoc(newCollectionRef, { createdAt: new Date(), name: newCollection });

      // L∆∞u ·∫£nh v√†o b·∫£ng m·ªõi
      await addDoc(collection(newCollectionRef, "images"), {
        url: imageUrl,
        timestamp: new Date(),
      });

      // C·∫≠p nh·∫≠t danh s√°ch b·∫£ng
      setCollections([...collections, { id: newCollection, name: newCollection }]);
      setSelectedCollection(newCollection);
      setNewCollection("");
      setShowCreateModal(false);
      alert("T·∫°o b·∫£ng th√†nh c√¥ng v√† ·∫£nh ƒë√£ ƒë∆∞·ª£c l∆∞u!");
    } catch (error) {
      console.error("L·ªói khi t·∫°o b·∫£ng:", error);
      alert("C√≥ l·ªói x·∫£y ra khi t·∫°o b·∫£ng.");
    }
    onClose(); // ƒê√≥ng modal sau khi l∆∞u xong
  };


  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      {showCreateModal ? (
        <div className="bg-white p-6 rounded-lg shadow-lg w-[500px] flex relative">
          <Image src={imageUrl} alt="Preview" width={200} height={200} className="rounded-md" priority />


          <div className="ml-4 flex-1">
            <h2 className="text-lg font-semibold mb-2">T·∫°o b·∫£ng</h2>
            <input
              type="text"
              value={newCollection}
              onChange={(e) => setNewCollection(e.target.value)}
              placeholder="Nh·∫≠p t√™n b·∫£ng"
              className="w-full p-2 border rounded-md mb-3"
            />
            <button
              onClick={handleCreateCollection}
              className="w-full bg-blue-600 text-white py-2 rounded-md hover:bg-blue-700 transition"
            >
              T·∫°o
            </button>
            <button onClick={() => setShowCreateModal(false)} className="w-full mt-2 text-gray-600">
              H·ªßy
            </button>
          </div>
        </div>
      ) : (
        <div className="bg-white p-6 rounded-lg shadow-lg w-80 relative">
          <h2 className="text-lg font-semibold mb-3">L∆∞u ·∫£nh</h2>
          {loadingCollections ? (
            <p className="text-gray-500 text-sm">ƒêang t·∫£i...</p>
          ) : collections.length > 0 ? (
            <select
              value={selectedCollection}
              onChange={(e) => setSelectedCollection(e.target.value)}
              className="w-full p-2 border rounded-md mb-3"
            >
              <option value="">Ch·ªçn b·∫£ng</option>
              {collections.map((col) => (
                <option key={col.id} value={col.id}>{col.name}</option> //  D√πng id l√†m key
              ))}
            </select>
          ) : (
            <p className="text-gray-500 text-sm">Ch∆∞a c√≥ b·∫£ng n√†o.</p>
          )}

          <button
            onClick={() => setShowCreateModal(true)}
            className="w-full bg-gray-200 text-black py-2 rounded-md hover:bg-gray-300 transition"
          >
            + T·∫°o b·∫£ng m·ªõi
          </button>
          <button
            onClick={handleSave}
            className="w-full bg-red-600 text-white py-2 mt-3 rounded-md hover:bg-red-700 transition"
            disabled={isSaving}
          >
            {isSaving ? "ƒêang l∆∞u..." : "L∆∞u"}
          </button>
          <button onClick={onClose} className="w-full mt-2 text-gray-600">
            H·ªßy
          </button>
        </div>
      )}
    </div>
  );
};

export default SaveModal;
